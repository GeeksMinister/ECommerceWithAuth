@inject ICartService _cartService
@inject IOrderClientData _orderClientData
@inject IMapper _mapper
@inject NavigationManager _navigation
@implements IDisposable


<style>

    .link-danger:hover {
        cursor: pointer;
    }

    .link-danger {
        font-size: 1rem;
    }

    input[type=number]::-webkit-inner-spin-button {
        opacity: 1
    }

    .validation-message{
        color: firebrick;
    }

</style>

@if(error is not null )
{
    <em class="h4 text-danger">@error</em>
}

@if (orderConfirmed == false)
{
    <h3 class="m-4 ps-4 pb-5 text-success">Your Shopping Cart</h3>
    @if (cartItems == null || cartItems.Count <= 0)
    {
        <p class="display-6 m-3 text-center" style="min-height:50vh; display: grid; align-content: center">
            - Your Cart is Empty -
        </p>
    }
    else
    {
        <div class="mb-5 pb-3 w-75 m-auto" style="min-height:35vh" onmouseout="getCartItemsCount()" onmousemove="getCartItemsCount()">
            @foreach (var item in cartItems)
            {
                <ul class="list-group h5 p-3 mb-4 list-group-item border-0 text-success
                            m-auto w-100" style="border-bottom: rgb(17, 70, 20) solid 2px !important;">
                    <li class="d-flex justify-content-between">
                        <span>@item.ProductName</span>
                        <span class="text-primary font-monospace">@($"{item.Price * item.Quantity:#.##}") kr</span>
                    </li>
                    <li class="d-flex justify-content-between">
                        <span class="link-danger ps-2 pb-0 mb-0 mt-4" @onclick="@(async () => await DeleteItem(item))"
                            onmouseout="getCartItemsCount()" onmousemove="getCartItemsCount()">Remove
                        </span>
                        <input type="number" @bind-value="item.Quantity" @bind-value:event="oninput"
                   @onchange="@(()=>item.GetValidQuantity())"
                   class="form-control text-center p-1 mt-4 me-2 border border-2 border-success"
                   style="width: 70px" min="1" max="@item.MaxQuantity" />
                    </li>
                </ul>
            }
        </div>
        <div class="d-flex justify-content-evenly h5 fw-normal m-3 pt-3 ps-4 pb-5"
             style="color:rgb(17, 80, 40);">
            <p>Order Items: [ <span class="text-primary fw-bold small">@cartItems.Count</span> ]</p>
            <p>
                To Pay:
                <span class="text-primary font-monospace">
                    @($"{cartItems.Sum(item => item.Price * item.Quantity):#.##}") kr
                </span>
            </p>
        </div>

        <div class="w-100 pt-3 mt-3 text-center" style="min-height:14vh">
            <button class="btn btn-success btn-outline-info text-white btn-lg col-4 col-sm-4
                col-lg-3 col-xxl-2 mt-4 mb-3 m-auto shadow" @onclick="@(() => orderConfirmed = true)">
                Place Order
            </button>
        </div>
    }
}
else if (orderPlaced == false)
{
    <div class="container w-100 d-flex justify-content-center align-items-center fw-bold mb-4 pb-3" 
        style="min-height: 60vh; max-width: 55rem;">
        <EditForm Model="newOrder" OnValidSubmit="@(async () => await PlaceOrder())">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger"/>
            <h3 class="text-success">Please fill out the order details </h3>
            <div class="row w-100 m-auto  card card-body bg-light mt-3">

                <div class="row row-cols-2 justify-content-evenly ">
                    <label class="col col-md-4 col-xxl-3 form-label gy-1 p-3 w-50">
                        First Name:
                        <InputText @bind-Value="newOrder.FirstName" class="form-control "/>
                    </label>
                    <label class="col col-md-4 col-xxl-3 form-label gy-1 p-3 w-50">
                        Last Name:
                        <InputText @bind-Value="newOrder.LastName" class="form-control" />
                    </label>
                    <label class="col col-md-4 col-xxl-3 form-label gy-1 p-3 w-50">
                        City:
                        <InputText @bind-Value="newOrder.City" class="form-control "/>
                    </label>
                    <label class="col col-md-4 col-xxl-3 form-label gy-1 p-3 w-50">
                        Postal Code:
                        <InputText @bind-Value="newOrder.PostalCode" class="form-control" />
                    </label>
                    <label class="col col-md-4 col-xxl-3 form-label gy-1 p-3 w-50">
                        Phone:
                        <InputText @bind-Value="newOrder.Phone" class="form-control "/>
                    </label>
                    <label class="col col-md-4 col-xxl-3 form-label gy-1 p-3 w-50">
                        Address:
                        <InputText @bind-Value="newOrder.Address" class="form-control" />
                    </label>

                   <div class="w-100 text-center g-5 p-5">
                       <button class="btn btn-success btn-outline-info text-white col-4" type="submit">Place Order</button>
                   </div> 
                </div>
            </div>
        </EditForm>
    </div>
}
else
{
    <div class="d-flex justify-content-center">
        <h3 class="display-6 m-4 ps-4 pb-5" style="color:rgb(17, 100, 29);">
            Thanks for your order &nbsp; &nbsp;
        </h3>
        <span class="h4 mt-4 pt-2">🍅🍖🥕🥔🍄🌽🥑🍇🍎🍒🍠🍓🍋🥩</span>
    </div>
    <div class="mb-5 mt-5">
        @foreach (var item in cartItems)
        {
            <ul class="list-group h5 p-3 ">
                <li class="list-group-item border-0 text-success text-center d-flex justify-content-between
                    m-auto w-75" style="border-bottom: rgb(17, 70, 20) solid 2px !important; ">
                    <span>
                        @item.ProductName &nbsp;[
                        <span class="text-primary font-monospace small fw-bold">@item.Quantity</span> ]
                    </span>
                    <span class="text-primary font-monospace fw-bold small">
                        @($"{item.Price * item.Quantity:#.##}") kr
                    </span>
                </li>
            </ul>
        }
    </div>
    <div class="d-flex justify-content-evenly h5 fw-normal m-3 pt-3 ps-4 pb-5"
     style="color:rgb(17, 80, 40);">
        <p>Order Items: [ <span class="text-primary fw-bold small ">@cartItems.Count</span> ]</p>
        <p>
            To Pay: <span class="text-primary font-monospace">
                @($"{cartItems.Sum(item => item.Price * item.Quantity):#.##}") kr
            </span>
        </p>
    </div>
}

<div class="w-75 m-auto mt-1 pt-1 pb-5 text-end">
    <a class="btn btn-primary btn-outline-info text-white shadow mb-5 " style="min-width: 10rem; font-weight:500;"
       href="./Shop">
        Back to Shop
    </a>
</div>

@code {
    List<CartItem> cartItems = new List<CartItem>();
    bool orderPlaced = false;
    bool orderConfirmed = false;
    OrderDto newOrder = new OrderDto();
    string error = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        cartItems = await _cartService.GetCartItems();
        cartItems.ForEach(item => item.GetValidQuantity());
        _cartService.OnChange += StateHasChanged;
    }

    private async Task DeleteItem(CartItem item)
    {
        await _cartService.DeleteItem(item);
        cartItems = await _cartService.GetCartItems();
        await InvokeAsync(StateHasChanged);
        if (cartItems.Count == 0) _navigation.NavigateTo(_navigation.Uri, forceLoad: true);
    }

    private async Task PlaceOrder()
    {
        await CreateNewOrder();
        orderPlaced = true;
        await _cartService.EmptyCart();
    }

    private async Task CreateNewOrder()
    {
        try
        {
            List<OrderItemsDto> orderItems = _mapper.Map<List<OrderItemsDto>>(cartItems);
            orderItems.ForEach(item => item.OrderId = newOrder.OrderId);

            newOrder.OrderItems = orderItems;
            newOrder.TotalToPay = cartItems.Sum(item => item.Price * item.Quantity);

            await _orderClientData.AddNewOrder(newOrder);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    public void Dispose() => _cartService.OnChange -= StateHasChanged;
}
