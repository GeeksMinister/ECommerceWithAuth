@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<style>

    textarea {
        resize: none;
        border-radius: 4%;
    }

    .container {
        border-radius: 2%;
    }

    .messages {
        min-height: 23rem;
        max-height: 30rem;
        max-width: 23rem;
    }
</style>

<div class="container overflow-auto shadow p-2 mb-1 bg-light border border-2 border-success
            messages small bg-opacity-50">
    @if (!userMessages.Any())
    {
        <h3 class="text-secondary text-center font-monospace">Chat with us</h3>
    }

    @foreach (var userMessage in userMessages)
    {
        <div class="row mb-3 d-flex m-1 rounded-3 text-center @(userMessage.CurrentUser ? "justify-content-end" : "")">
            <div class="card w-auto shadow p-1  @(userMessage.CurrentUser ? "bg-success bg-opacity-75" : "")" style="width: 18rem;">
                @if (userMessage.CurrentUser == false)
                {
                    <span class="small  text-success">@userMessage.Sender</span>
                }
                <ul class="list-group list-group-flush h6" style="max-width:17rem;">
                    <li class="list-group-item fw-normal p-2 @(userMessage.CurrentUser ? "bg-success bg-opacity-50 text-light" : "")">@userMessage.Message</li>
                </ul>
                <div class="card-footer p-0 @(userMessage.CurrentUser ? "bg-success bg-opacity-50 text-light" : "")">
                    <span class="small fw-lighter">@userMessage.DateSent.ToString("HH:mm | yy MMM dd")</span>
                </div>
            </div>
        </div>
    }
</div>

<textarea class="bg-light w-100 form-control border border-2 border-success rounded-3"
          @bind="messageInput" placeholder="Write message" rows="2" cols="42">
</textarea>

<div class="row d-flex justify-content-around w-100 p-0 m-0 g-0">

    <div class="col-4 border border-1 border-dark rounded-3">
        <button class="btn btn-light btn-outline-success w-100 fw-bold" @onclick="Send"
                disabled="@(!IsConnected)">
            Send
        </button>
    </div>
    <div class="col-4 border border-1 border-dark rounded-3">
        <button class="btn btn-secondary btn-outline-dark text-white w-100 fw-bold"
                onclick="closechat()">
            Close
        </button>
    </div>
</div>

@code {

    [Parameter]
    public string Name { get; set; } = string.Empty;
    private HubConnection? hubConnection;
    private List<ChatMessage> userMessages = new();

    private string? messageInput;

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            userMessages.Add(new ChatMessage
                {
                    Sender = user,
                    Message = message,
                    CurrentUser = (user == Name),
                    DateSent = DateTime.Now

                });

            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (!string.IsNullOrEmpty(Name) && !string.IsNullOrEmpty(messageInput))
        {
            if (hubConnection is null) return;
            await hubConnection.SendAsync("SendMessage", Name, messageInput);

            messageInput = string.Empty;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public class ChatMessage
    {
        public string Sender { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
        public string Receiver { get; set; } = string.Empty;
        public bool CurrentUser { get; set; }
        public DateTime DateSent { get; set; }
    }


}
