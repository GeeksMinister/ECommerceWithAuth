@inject ICartService CartService

@if (orderPlaced == false)
{
    <h3 class="m-4 ps-4 pb-5 text-success">Your Shopping Cart</h3>
    @if (cartItems == null || cartItems.Count <= 0)
    {
        <p class="display-6 m-3 text-center" style="min-height:50vh; display: grid; align-content: center">
            - Your Cart is Empty -
        </p>
    }
    else
    {
        <div>
            @foreach (var item in cartItems)
            {
                <div class="container pt-4 mt-3 mb-3">
                    <div class=" ">
                        @item.ProductName
                    </div>
                    <div class="text-end fw-bold">
                        @($"{item.Price * item.Quantity:#.##}")
                    </div>
                    <button class=" " @onclick="@(async () => await DeleteItem(item))">
                        Delete
                    </button>
                    <input type="number" @bind="item.Quantity" class="form-control" 
                        style="width: 70px" min="1" />                                        
                </div>
            }
            <div class="item-price">
                Total (@cartItems.Count): @cartItems.Sum(item => item.Price * item.Quantity)
            </div>
            <div class="w-100 pt-5 mt-5 text-center" style="min-height:25vh">
                <button class="btn btn-success btn-outline-info text-white btn-lg col-4 col-sm-4
                    col-lg-3 col-xxl-2 mt-4 mb-5 m-auto" @onclick="PlaceOrder">Place Order
                </button>
            </div>
        </div>
    }
}
else
{
    <h3 class="display-6 m-4 ps-4 pb-5 " style="color:rgb(17, 100, 29);">Thank you for your order!</h3>
    <div class="mb-5">
        @foreach (var item in cartItems)
        {
            <ul class="list-group h5 p-3 ">
                <li class="list-group-item border-0 text-success text-center d-flex
                            justify-content-between m-auto w-75"
                            style=" border-bottom: rgb(17, 70, 20) solid 2px !important; ">
                    <span>@item.Quantity - @item.ProductName </span>
                    <span class="text-primary font-monospace fw-bold small">
                        @($"{item.Price * item.Quantity:#.##}")
                    </span>
                </li>
            </ul>
        }
    </div>
    <div class="d-flex justify-content-evenly h5 fw-normal m-3 pt-3 ps-4 pb-5"
            style="color:rgb(17, 80, 40);">
        <p>Order Items: [ <span class="text-primary fw-bold small ">@cartItems.Count</span> ]</p>
        <p>
            To Pay: <span class="text-primary font-monospace">
                @($"{cartItems.Sum(item => item.Price * item.Quantity):#.##}")
            </span>
        </p>
    </div>
}

<div class="w-75 m-auto pt-2 pb-5  mt-3 text-end">
    <a class="btn btn-primary btn-outline-info text-white shadow" style="min-width: 10rem; font-weight:500;"
       href="./Shop">Back to Shop
    </a>
</div>

@code {
    List<CartItem> cartItems = new List<CartItem>();
    bool orderPlaced = false;

    protected override async Task OnInitializedAsync()
    {
        cartItems = await CartService.GetCartItems();
    }

    private async Task DeleteItem(CartItem item)
    {
        await CartService.DeleteItem(item);
        cartItems = await CartService.GetCartItems();
    }

    private async Task PlaceOrder()
    {
        orderPlaced = true;
        await CartService.EmptyCart();
    }
}
